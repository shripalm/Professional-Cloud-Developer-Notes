Google Cloud offers:
 - Compute*
 - Deployment*
 - Storage*
 - Machine Learning*
 - Application Services*
 - Migration*
 - Monitoring*
 - Connection/Networking*
 - Analytics
 - IAS/IAM*
 - API Platform*
 - Hybrid/Multicloud

Compute:
 App Engine*			GKE*						Preemtible VMs			Bare Metal
 Compute Engine*		Blockchain Node Engine		Shilded VMs				Batch
 Cloud Run*				Cloud Function*				Sole Tenant				VMware engine

Storage/DB: 
 Cloud Storage*			SQL*						BT*						FireStore*
 BQ*					MemoryStore*				Spanner*				PersistanceDisk
 Local SSD				AlloyDB						SQL Insights			DB Migration Services
 FireBase               Cloud Storage for FireBase  Storage Transfer        Data store
 Dataproc               Dataflow                    Firebase Realtime Database

Deployment CI/CD:
 App Engine				GKE							Functions				Run
 Deployment Manager		Build						Marketspace				Appsheet
 Composer				Container Registry			Source Repo				Artifact Registry
 Deployment				TPIs - TerraForm, Jenkins, GitLab, Travis

AI/ML:
 Cloud Translation		Vision						STT/TTS					Document AI
 DL Containers/VMs		Vertex AI  					Talent AI 				Natural Language
 Video Intelligence API Tensorflow					Keras					AI Platform Training/Prediction
 AutoML					DataFlow/DataPrep			KubeFlow				DialogFlow

Application Services:
 Application Schedular	Tasks						Eventarc				Pub/Sub
 Workflows

Migration:
 BQ DataTransfer		Cloud DataTransfer			Foundation Toolkit		KF
 MIG For anthos & GKE	MIG for Compute Engine		MIG from amazon redshift and teradata
 Storage transfer 		Transfer Appliance

Monitoring:
 Logging				Monitoring					Profiler				Trace
 Error Reporting		opentelemetry				Prometheous				Grafana
 Newrelic

Networking/Connection:
 CDN					DNS 						Armor					Domains
 IDS					Load Balancers				NAT Gatway				Router
 VPN					X-Cloud InterConnect		Dedicated InterConnect	Direct Peering
 Media CDN				Packet Mirroring			VPC						Traffic Director

Analytics:
 Analytics Hub			BigLake						BigQuery				Composer
 Data Fusion			Connected Sheets			DataFlow				DataPlex
 DataPrep				DataProc					DataStream				Pub/Sub

IAM:
 IAM					Access Context Manager		Access Transparency		Assured Workloads
 BeyondCorp Ent         Bin Auth                    CA Center               Cloud Asset Inventory
 Audit Logs             Data Loss Prevention        EKS: External Keys Manager  
 HSM: HW Secure Module  Identity                    Identity Aware Proxy    KMS: Key Management Serv
 ETD: Event Threat Detect                           Risk Manager            Resource Manager
 Security Key Enforcement                           Secret MJanager         Virus Total
 Web Security Scanner   reCaptcha Enterprise

API Platform:
 API Analytics          Gateway                     Monetization            APIgee API Platform
 APIgee Hybrid          APIgee Sense                AppSheet                Endpoints
 Developer Portal       MarketPlace                 

Hybrid/MultiCloud:
 Anthos                 Anthos Cluster              Anth Config Management  Anth Service Mesh
 CR for Anthos          MarketPlace For Anthos      Migrate For anthos      Traffic Director





Individuals:


    SN Google Kubernetes Engine:
        - Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. GKE simplifies the process of running, managing, and scaling containerized applications using Kubernetes, without the need to manage the underlying infrastructure.
        - It falls under the category of Containerized Orchestration as a Service (CaaS), as it abstracts away the underlying infrastructure and provides a platform for deploying, managing, and scaling containerized applications using Kubernetes.
        - Advantages: Managed, Horizontal Scalable, Auto Upgrades, Integration With Google Cloud, Secure (RBAC, Network Policies, Encryption), MultiZone and MultiRegion Deployment, Monitoring and Logging, Supports Hybrid and multi cloud deployments, ML/AI Integration.
        - DisAdvantages: Complex, Costliear than self managed Kubernetes, Limited Customization, Network Latency on on-premesis, Data transfer cost, Performance Variablity (Shared Nature of Resource), initial setup complexity, Resource Management. 
        - Usecases: Deploying microservices, Running Batch processes (type Job/CronJob Conf defined in yaml file), Hosting Web Apps.
        - Not Serverless, and Support both applications State Less and Statefull.
        - Services comes around GKE:
            - Kubernetes
            - GCP Services - Storage, Pub/Sub, BigQuery, SQL, Spanner, FireStore, etc.
            - IAM
            - Monitor/Log - Stackdriver
            - LoadBalancer
            - Networking - VPC, DNS
            - Build
            - MarketPlace
            - Anthos
            - Istio: Service Mesh
            - Knative: Deploying and managing serverless workloads
            - Tekton: CI/CD Pipelines
            - Package Manage - Helm
            - GCR Container Registry
        - Commands:
            - kubectl:  cluster-info
                        get pods|deployments|services|nodes|namespaces|events
                        describe pod <pod-name>
                        logs <pod-name>
                        exec -it <pod-name> -- /bin/bash
                        create deployment <deployment-name> --image=<image-name>
                        expose deployment <deployment-name> --port=<port-number>
                        set image deployment/<deployment-name> <container-name>=<new-image>
                        edit <resource-type> <resource-name>
                        delete pod <pod-name>
                        delete deployment <deployment-name>
                        delete namespace <namespace-name>
                        scale deployment <deployment-name> --replicas=<desired-replicas>
                        port-forward <pod-name> <local-port>:<pod-port>
                        create namespace <namespace-name>
                        config view
                        config use-context <context-name>
                        describe <resource-type> <resource-name>
        - Similar Services (Diffs): 
            - Cloud Run: 
                Google Kubernetes Engine (GKE) is a managed Kubernetes service that provides advanced control for deploying, managing, and scaling complex applications, making it suitable for stateful workloads and intricate microservices architectures. In contrast, Cloud Run offers a fully managed, serverless platform for deploying stateless microservices and APIs, abstracting infrastructure concerns and auto-scaling based on HTTP requests, making it ideal for simpler, event-driven applications with variable traffic patterns.
            - App Engine: 
                Google Kubernetes Engine (GKE) is a managed Kubernetes service offering granular control for deploying and scaling containerized applications, suited for complex microservices and stateful workloads. Google App Engine is a fully managed platform-as-a-service (PaaS) that abstracts infrastructure management for simpler deployments, making it ideal for web apps and APIs, but with less customization compared to GKE.
            - Anthos: 
                Google Kubernetes Engine (GKE) is a managed Kubernetes service focusing on container orchestration within Google Cloud. Anthos is a platform that extends GKE to manage Kubernetes clusters across multiple clouds and on-premises environments, providing a unified control plane for hybrid and multi-cloud deployments, along with modernization tools for existing applications.
            - DataProc: 
                Google Kubernetes Engine (GKE) is a managed Kubernetes service for deploying and scaling containerized applications. It's great for microservices and modern apps. Google Cloud Dataproc is a managed Apache Spark and Hadoop service for big data processing. It's ideal for processing and analyzing large datasets.
            - Functions:
                Google Cloud Functions is a serverless compute service that runs your code in response to events. It's great for lightweight, event-driven functions.
            - Knative:
                Knative is an open-source platform built on Kubernetes that simplifies deploying and managing serverless workloads. It's designed for event-driven, automatic scaling applications.
        - Cost Factors:
            Compute Resources
            Node Pools
            Data Egress
            Storage
            Number of req/ amount of data transfer
            Regions and Zones
            Support Plan
            - Cost optimize factors:
                RightSize Node
                Node AutoScale
                Node Pools
                Pod Autoscale
                Efficient Cluster Setup
                Resource Req and limits
                Idle Resources
                Node Preemptibility: Consider using preemptible VMs for non-critical workloads.
                Spot Nodes (GKE Autopilot): If using GKE Autopilot, consider using preemptible and spot nodes.
                Efficient Networking: Optimize networking configurations to minimize unnecessary data transfer.
                Use GitOps and CI/CD
                Reserved Instances (GKE Autopilot): For GKE Autopilot, you can reserve a certain number of vCPUs.
        - Other Features:
            - node auto-repair and automatic cluster upgrades
            - Pod Security Policies, Network Policies, and integration with Google Cloud IAM for fine-grained access control.
            - CRDs
            - Have the ability to set resource quotas and limits for namespaces or specific workloads to prevent resource overconsumption.
            - GKE Autopilot: 
                - Use When Focus is on app development, Event Driven Workloads, Stateless Microservices and workloads.
            - Third Party Tools: Prometheus for monitoring or Grafana for visualization.
            - Real World usecases: 
                - MicroService
                - Media Straming
                - Financial Service
                - Gaming Services
                - IoT
                - CMS
                - Data Analytic/ML
                - SaaS Softwares
                - AI Driven Apps
            - Security
                node auto-repair and automatic cluster upgrades
                Private Clusters: No Public IP
                RBAC
                Supports Data Encryption
                Node Identity and Authentication
                Autopilot clusters: automated security patching, auto-upgrades, and node rotation.
                Third party integration securely
        - Container -> Pod -> Node/Control Planes -> Cluster: This progression represents the hierarchy of these concepts within the context of container orchestration, where containers are the smallest units, grouped into pods, which run on nodes, and nodes are managed within a cluster.

    SN Google Container Registry:
        - Google Container Registry (GCR) is a managed container image storage service provided by Google Cloud Platform (GCP). It is designed to store, manage, and distribute Docker container images, which are used to package and deploy applications and their dependencies within containers.
        - Google Container Registry (GCR) is indeed a Platform as a Service (PaaS) offering. It provides a platform for storing, managing, and distributing container images, which are a fundamental part of containerized applications. 
        - Advantages: Private and secure Repo, GKE integration, Global Distribution, Scalable, Versioning and Tagging, Lifecycle Management, Integration with CI/CD, Docker V2 compatible.
        - Disadvantages: Limited to google platform, Network Latency, Costs, Complex, Not applicable for on-premises.
        - Similar Services: 
            - Docker Hub: Supports public and private both repos. Large Community. Free plans also available.
            - AWS Elastic CR: Scalable, Secure, pay as you go pricing structure
            - Azure CR: Geographic Replication, Secure.
            - Quay: Vulnarability Scanning, image notary, Automates: Build, Scan and Distribution, Flexible and free plan available.
            - Harbor: OpenSource, Replication, Security Scanning, Policy based image retention. TPIs CaaS.
            - GitLab CR: Integrated within GitLab's DevOps platform. Simple and CI/CD integration with GitLab.
            - JFrog Artifactory: Universal Artifact Repository, Secure, Flexible.
        - When to use: GCP, GKE, Security ang IAM Users and services, Global Distribution, Hybrid and multi-clloud also, It is managed service so no need to spare time for that, Integrates with CI/CD.
        - Cost Factors: Data Storage, Data Transfer, Distribution, Operations like listing and deleting, Retention policy, Access Control and logging.
        - Cost Cutting Factors: Implement Retention policy, Regularly review and cleanup images, Use Regional instead of multi-regional if not required, Monitor and analyse data transfer patterns.
        - Monitoring: 
            - Cloud Monitor
            - Cloud Logging
            - TP Tools: Prometheous, Grafana, Datadog
            - Custom Script and automation
            - Lifecycle events
            - Access and Usage report
            - Security Scanning and loggs
            - Cost monitoring

    SN Google App Engine:
        - Google App Engine is a fully managed Platform as a Service (PaaS) offering from Google Cloud that allows developers to build, deploy, and manage applications without having to manage the underlying infrastructure. App Engine abstracts away much of the operational complexity, allowing developers to focus on writing code and building features.
        - Features: 
            - Managed environment
            - Supports so Many Languages
            - Auto scale
            - Offers Managed Data Storage
            - App Versoining, and traffic splitting
            - MicroService architectures
            - Version Management and rollback
            - Built in services like authentication and security
            - Single Command Deployment
            - Built in Monitoring logging and diagnosis
            - Cost Management
        - Use Cases:
            - Web Services
            - Microservices
            - Scalable Application
        - Disadvantages:
            - Supports Many but limited Languages
            - limited customization
            - Cold Start
            - Cost Complexity
            - Resource Limits
            - Network limits
            - Limited Local Testing
            - StateLess Nature
            - Versioning Complexity
        - Deploying Container in app engine: 
            - Create Docker Image
            - Create app.yaml Configuration
            - Deploy it to app engine with gcloud command utility
            - Scale and Manage
        - How to Decide where to use which to deploy containerized application among GAE, GCR and GKE:
            - GAE: 
                - Simple and Rapid Development
                - Auto Scaling
                - StateLess Applications
                - Limited Customization
            - GCR
                - Stateless
                - Flexible Runtimes: supports any language
                - event driven workloads
                - variable workloads
                - if container already exists
            - GKE: 
                - Complex and customised deployments
                - Container Orchestration
                - Stateful Apps
                - Container Expertise
                - Hybrid and multi cloud deployments
        - Commands (gcloud app):
            - Deploy and Manage Apps: 
                - deploy | browse
                - versions: list | describe | delete
            - Scale and Configure: 
                - versions: update | migrate
                - services: list | delete | update
            - Logging and Monitoring: 
                - logs tail | browse logs | operations list
            - Cron Jobs and task queues: 
                - cron jobs list | task queues list
            - Custom Runtimes: 
                - deploy --image-url
                - browse --version
            - Traffic Splitting and Migrations: 
                - services: split-traffic | migrate
            - Certificates and domains: 
                - domain-mappings: list | create
                - ssl-certificates: list | create
        - Cost Factors:
            - Runtime
            - Storage
            - Network Egress
            - App engine features
            - App Versioning and Split Traffic
            - Cost Cutting Factors: 
                - Right Size Instance
                - Auto Scaling
                - Optimise Request
                - Data store and database optimisation
                - Review monitor and logging
                - App Version Cleanup
                - Set Quotas and limits
        - Types:
            - Standard:
                - fully managed platform optimized for building and deploying lightweight, stateless applications. It provides automatic scaling, load balancing, and a curated set of runtimes for popular programming languages.
                -  It is suitable for web applications, APIs, and microservices that have relatively predictable traffic patterns and can run within the constraints of the supported runtimes.
                - Benefits: Automatic scaling, low-latency requests, easy deployment, and optimized performance for applications with modest resource requirements.
            - Flexible:
                - The Flexible Environment is designed for applications that require more customization and flexibility. It allows you to run applications in Docker containers and provides more control over the runtime environment.
                -  It is ideal for applications that have complex dependencies, require custom runtimes, or need to run background tasks. It supports a wider range of runtimes and allows you to install additional software.
                - Benefits: Custom runtime support, ability to use Docker containers, more control over resources and environment, and compatibility with a broader range of applications.

    SN Google Cloud Run:
        - Google Cloud Run is a serverless compute platform provided by Google Cloud that allows you to deploy containerized applications without the need to manage the underlying infrastructure.
        - Cloud Run is categorized as a Platform as a Service (PaaS) offering. It allows developers to focus on writing code without needing to manage the underlying infrastructure, making it a PaaS solution for deploying and running containerized applications.
        - Google Cloud Run is a managed compute platform that automatically scales your containerized applications. It is designed to abstract away infrastructure management and provide an environment for deploying and running containers. 
        - Features:
            - Serverless
            - Containerization
            - Auto Scaling
            - Fully Managed
            - Event-Driven
            - Accepts HTTP Request
            - Pay per use
            - Handle Multiple Requests concurrently
            - Deployment Flexible
            - Regional Deployments
            - API Auth Support
        - Disadvantages:
            - Stateless Limitations (Not suitable for stateful apps)
            - Cold Starts
            - Default Execution time limit is 15 mins
            - Limited BG process
            - Max Container size 2GB
            - Networking Limitations
            - Not advance customization
        - Usecases:
            - WebApps
            - BE for Mobile Apps
            - Microservices
            - Batch processing
            - API Proxies and Gateways
            - Stateless apps
            - Serverless containers
            - Event Driven workloads
            - Small to medium workloads
        - There is not a way you can deploy app without containerized app
        - Cost Factors: 
            - Memory 
            - CPU
            - Request Count
            - Networking
            - concurrent Request
            - Storage
            - Region
            - Auto Scale
            - Cost Cutting Factors:
                - use Caching
                - Efficient code
                - Use Schedular
                - Gtracefull shutdown when instance no longer needed
                
    SN Compute Engine:
        - Google Compute Engine is an Infrastructure as a Service (IaaS) offering from Google Cloud that provides virtual machines (VMs) for running a wide range of workloads, from simple web applications to complex, high-performance computing tasks. 
        - Features:
            - Fully Customization
            - Full control on developers
            - Supports Auto Scalling
            - PersistanceDisk
            - You can configure firewalls and network policy
            - Global reach
            - preemptible Instances
            - Image management
            - snapshot management
            - backups
            - Multizone availability
        - Disadvantages: 
            - Management
            - Manual Scalling
            - Cost Complexity
            - Infra management
            - Limited Serverless Capabilities
            - Learning Curve
        - Use Cases:
            - Every Other Application which comtains more manual work and customization can be deployed here.
        - cost Factors:
            - Instance Types
            - Usage
            - Regions
            - PersistanceDisk
            - Egress outgress
            - Regional and zonal Resources
            - Load balancing
            - Operations and api calls
            - Backup and disaster recovery
        - Where not to use Compute Engine: 
            - Complexity: Some applications are simple and lightweight, requiring minimal resources and management. Using Compute Engine for such applications might introduce unnecessary complexity and overhead.
            - Resource Requirements: Compute Engine allows fine-grained customization of resources, which is beneficial for applications with specific resource demands. However, for applications with modest resource requirements, using a more managed service could be more efficient.
            - Cost Efficiency: Compute Engine provides control over costs by allowing you to choose instance types and configurations. However, for cost-sensitive applications with variable workloads, serverless or managed services might offer better cost efficiency.
            - Developer Focus: If your primary focus is developing and deploying code without managing infrastructure, other Google Cloud services like App Engine or Cloud Run provide a more streamlined experience.
            - Scaling and Load Balancing: While Compute Engine allows manual scaling and load balancing, other services like Google Kubernetes Engine or Cloud Run offer built-in auto-scaling and load balancing features.
            - Maintenance Overhead: Compute Engine instances require more management and maintenance compared to fully managed services. For applications where minimizing operational overhead is a priority, other options might be more suitable.
            - Microservices and Containers: If your application is designed using microservices architecture and containers, Google Kubernetes Engine might offer better container orchestration and management capabilities.
            - Specialized Use Cases: Certain applications might have specific requirements, such as real-time data processing, machine learning inference, or IoT data streaming, which could be better served by specialized services.

    SN Cloud Functions: 
        - Cloud Functions is categorized as a Function as a Service (FaaS), which is a subset of Platform as a Service (PaaS). In the FaaS model, developers write functions that respond to specific events, and the cloud provider takes care of scaling and managing the infrastructure needed to execute those functions.
        - Cloud Functions is a serverless compute service provided by Google Cloud Platform (GCP) that allows you to write and deploy event-driven functions in various programming languages. It enables you to execute code in response to events without provisioning or managing servers, making it ideal for lightweight, event-driven applications and automations.
        - Advantages: 
            - Serverless
            - event driven
            - Scalable
            - cost effective
            - Quick Deployment
        - Languages Support:
            - .NET
            - Java 
            - Ruby 
            - Node.js 
            - Python 
            - Go
        - DisAdvantages: 
            - 9 Minutes Execution time by Default
            - Stateless
            - Limited Resouce control
        - Usecases: 
            - Alerts and notifications
            - automation
            - image and Video processing
            - webhooks
        - Cost Factors:
            - Execution time
            - requests
            - Usage
            - Cost Cutting Factors:
                - Optimize code
                - minimize dependancy
                - optimize triggers

    SN Blockchain Node Engine:
        - It's a fully managed node-hosting service offered by Google Cloud, designed to simplify the deployment and management of blockchain nodes for companies.
        - Blockchain Node Engine is a managed node-hosting service that enables companies to relay transactions, deploy smart contracts, and interact with blockchain data on Google Cloud's reliable and secure infrastructure.
        - It addresses the challenges of deploying and managing self-hosted nodes by providing the configurability of self-managed nodes without the operational overhead.
        - Blockchains consist of transaction data stored in decentralized databases. Nodes maintain copies of the blockchain's transaction history and form a peer-to-peer network to ensure synchronization.
        - Advantages:
            - Streamlined Provisioning: Blockchain Node Engine simplifies node deployment, allowing developers to provision new nodes quickly with specified regions and networks (Mainnet, Testnet) without the need for manual synchronization.
            - Fully Managed Operations: The service offers fully managed operations, reducing the need for a dedicated DevOps team. Google Cloud actively monitors nodes, handles restarts during outages, and provides a service level agreement (SLA) for availability.
            - Dedicated Nodes
            - Enterprise-Grade infra for WEB-3
        - Applications:
            - Ingesting blockchain data
            - Fast, reliable, and private transactions
            - Smart contract and dApp development
        - Two types of node
            - full node: Best for building dApps or reading real-time data
            - archive node: Best for reading full historical data
        - PaaS Offering
        - Supported Blockchain: Ethereum is the first blockchain supported by Blockchain Node Engine, enabling developers to provision fully managed Ethereum nodes for secure blockchain access.
        - Blockchain Node Engine aims to empower developers building products on blockchain-based platforms by providing reliable, performant, and secure infrastructure for managing blockchain nodes.

    SN Preemtible VMs:
        - Preemptible VMs are a type of virtual machine instance offered by Google Cloud Platform (GCP) that come with a significant cost reduction in exchange for being short-lived and non-guaranteed. These instances are suitable for workloads that can handle interruptions and can be terminated after 24 hours, offering a cost-effective solution for various use cases.
        - Benefits: Cost Savings, Scalable, Batch Processing, Useful for testing environment
        - Use Cases: Data Processing, Content Delivery, CI/CD pipelines, Rendering and Simulation
        - It classifies as IaaS.
        - Similar Service: Spot Instances on AWS
        - Where to Use:
            Batch processing, parallel computing, and distributed workloads.
            Cost-effective solutions for temporary, non-critical tasks.
            Workloads that can tolerate interruptions and are fault-tolerant.
        - Where Not to Use:
            Mission-critical applications or workloads requiring constant uptime.
            Long-running, stateful applications that cannot handle interruptions.
            Workloads that require guaranteed resources and performance.
        - It's important to consider the specific requirements of your application and workload before utilizing Preemptible VMs, as they may not be suitable for all scenarios due to their inherent limitations.

    SN Shielded VMs:
        - Shielded VMs are a security feature in Google Cloud Platform (GCP) that provide enhanced protection against malicious activities and advanced threats. They are designed to safeguard the integrity and confidentiality of virtual machines by ensuring their boot process, firmware, and runtime environment are secure and tamper-resistant.
        - Benefits: Improved Security, Secure Boot, UEFI Firmware, Integrity Monitoring
        - Use Cases: Sensitive Workloads, Regulated Industries, Multi-Tenancy
        - IaaS
        - Disadvantages: Complexity, Resource Overhead
        - Similar Services: VM Shielding on Azure
        - Where to Use:
            Workloads with strict security and compliance requirements.
            Critical applications and data that require strong protection against advanced threats.
            Multi-tenant environments to ensure isolation and security among different users.
        - Where Not to Use:
            Workloads with minimal security requirements that do not handle sensitive data.
            Situations where the overhead of security measures may impact performance.
        - Note: While Shielded VMs provide enhanced security, they may come with additional complexity and resource overhead. It's important to assess the security needs of your workload and weigh the benefits against any potential drawbacks before implementing Shielded VMs.

    SN Sole Tenant:
        - Sole Tenant Nodes are a feature in Google Cloud Platform (GCP) that allows you to have exclusive use of a physical machine, providing more control, isolation, and performance for your workloads. With Sole Tenant Nodes, you can run your VM instances on dedicated hardware, which can be particularly advantageous for specific use cases.

        - Benefits: Resource Allocation, Isolation and Security, Licensing Flexibility, Compliance Requirements 
        - Use Cases: Licensing Optimization, Performance-Critical Workloads, Data Isolation
        - IaaS 
        - Disadvantages: Higher Costs, Resource Management
        - Deployment Options: Regional, Zonal, Multi-Zonal
        - Where to Use:
            Workloads that require dedicated hardware for compliance, licensing, or performance reasons.
            Applications with stringent data isolation requirements.
            Mission-critical workloads that need consistent and predictable performance.
        - Where Not to Use:
            Cost-sensitive workloads that can tolerate shared resources.
            Applications that do not require dedicated hardware or stringent isolation.
        - Note: While Sole Tenant Nodes provide benefits in terms of isolation and control, they come with higher costs and additional management overhead. It's important to evaluate the specific needs of your workload before deciding to use Sole Tenant Nodes.

    SN Bare Metal:
        - Bare Metal is a specialized offering in Google Cloud Platform (GCP) that provides direct access to physical hardware, allowing you to run workloads on dedicated servers without the virtualization layer. With Bare Metal, you have complete control over the hardware, making it suitable for specific use cases that require high performance, isolation, and customization.
        - Benefits: Performance, Isolation, Customization, Flexible
        - UseCases: Highperformance workloads, Specialized Workloads, Security and Compliance
        - IaaS
        - DisAdvantages: Cost, Resource Management Manpower
        - Regional and Zonal only
        - Where to Use:
            Workloads that demand the highest level of performance and customization.
            Applications with strict security and compliance requirements.
            Environments requiring custom software installations or specialized configurations.
        - Where Not to Use:
            Budget-sensitive workloads that can work well with virtualized instances.
            Applications that don't require the level of control and performance offered by Bare Metal.
        - Note: Bare Metal instances offer unparalleled performance and control but come with higher costs and increased management complexity. Evaluate the specific needs of your workload before opting for Bare Metal to ensure the benefits align with your requirements.

    SN Batch:
        - Batch service in Google Cloud Platform (GCP) provides a managed solution for running batch processing workloads at scale. It allows you to execute large-scale computing tasks, data processing, and batch jobs without the need to manage the underlying infrastructure. Batch service helps optimize resource utilization, manage job dependencies, and handle job failures.
        - advantages: Managed Infra, Scalable, Supports internal job dependencies, auto retries failed jobs.
        - Use Case: data, media, image processing, scientific computing
        - PaaS
        - Disadvantages: 
            Limited Application Types: Batch service is best suited for data-centric, parallelizable workloads. It may not be suitable for interactive or real-time applications.
            Complex
            Lurning Curve
        - Similar service is AWS Batch
        - Regional and Multi Regional
        - Where to use:
            Tasks require scalable resources
            Large-scale batch jobs with dependencies and job scheduling.
            Media processing, image transcoding, and content transformation.
        - Where not to use:
            Real-time or interactive applications that require immediate response.
            Workloads with unpredictable and sporadic resource demands.
            Applications that do not fit the batch processing paradigm.
    
    SN VMware Engine:
        - VMware Engine is a cloud service in Google Cloud Platform (GCP) that allows you to run VMware-based workloads natively in the cloud, while maintaining compatibility with your existing VMware environment. It provides a fully managed and scalable solution for running VMware virtual machines (VMs) without the need to manage the underlying infrastructure.
        - Benefits: Seamless Migration, Compatibility, Managed Infrastructure, Scalability
        - Use Cases: Data center Extension, App modernization, Development and testing environments
        - IaaS
        - DisAdvantages: Cost Consideration, Limited to VMware Workloads
        - Similar Services: Azure VMware Solution (Microsoft Azure):
        - Regional and Zonal
        - Where to Use:
            Migrating and extending VMware workloads to the cloud.
            Maintaining VMware compatibility while benefiting from cloud resources.
            Running applications in a familiar VMware environment.
        - Where Not to Use:
            Greenfield projects that do not have existing VMware dependencies.
            Workloads that require fully serverless or container-based architectures.

    SN Cloud Storage:
        - Cloud Storage is an object storage service provided by Google Cloud Platform (GCP). It allows you to store and retrieve a wide range of data, such as documents, images, videos, backups, and application data. Objects in Cloud Storage are stored in a flat namespace, organized into buckets.
        - Advantages: Scalable, Durable, Globlly Accessible, Secure, cost effective
        - Dis: Performance, Complex Quering
        - Usecases: Web Content, Backups, archives, multimedia content
        - types (Storage Class): 
            Standard - High Cost - Hot
            Nearline -           - One per month
            ColdLine -           - once 90 day
            Archive  - Low Cost  - Once a year
        - RL UseCases: Webhosting, backup and recovery, media storage and distribution, data archivening, colab work
        - Similar Service: S3
        - Classification: IaaS
        - Costing: Storage, bandwidth, Frequency, Storage Class
        - Cost Cutting: Setting lifecycle policies for moving and deleting not needed files.
        - Deployment options: R, MR, Z, MZ

    SN Cloud SQL:
        - Cloud SQL is a fully managed relational database service provided by Google Cloud Platform (GCP). It offers a managed environment for popular relational database management systems (RDBMS) such as MySQL, PostgreSQL, and SQL Server. Cloud SQL automates database maintenance tasks and provides high availability, scalability, and security for your databases.
        - Advantages: Managed, Availability, Scalable, Compatible, Secure
        - Dis: Limited customization, Limited scaling
        - Use Cases: Cloud SQL is well-suited for applications that require a traditional relational database, but benefit from managed services to reduce operational overhead.
        - RL Usecases: Web Apps, MicroService, Analytic and Reporting, SaaS, Development and Testing
        - Similar Services: AWS RDS
        - Classification: DBaaS
        - Costing: Instance type, Storage Size, Bandwidth, backup sizes
        - Cost Cutting: Choose right typed instance, set policies and auto backup wisely
        - Where to Use and Where Not to Use: Use Cloud SQL when you need a fully managed relational database without the complexity of manual maintenance. However, it may not be suitable for extremely high-performance, large-scale, or specialized databases.
        - Deployment Options: Regional

    SN Cloud Spanner: 
        - Cloud Spanner is a globally distributed, horizontally scalable, and strongly consistent relational database service provided by Google Cloud Platform (GCP). It combines the benefits of traditional relational databases with the scalability and availability of NoSQL databases.
        - Advantages: Global Distribution, Horizontal Scaling, consistency, ANSI SQL Compatibility, High Availability
        -DisAdvantages: Complex, Learning Curve, Cost
        - UseCases: Cloud Spanner is ideal for applications that require a globally distributed, highly available, and strongly consistent database with support for complex queries.
        - RL UseCases: Financial Services, Gaming, E Commerce, IoT
        - Similar Services: Amazon Aurora Global Database
        - Service Classification: DBaaS
        - Costing: Size, Storage Usage, Data Transfer, node Numbers
        - Cost Cutting: Optimize costs by using instance sizes that match your workload, managing data storage effectively, and optimizing queries for efficient resource usage.
        - Where to Use and Where Not to Use: Use Cloud Spanner for global applications that require strong consistency and low-latency access to data across regions. It might not be suitable for simple, low-traffic applications due to its complexity and potential cost.
        - Deployment: MR

    SR Cloud MemoryStore: 
        - Cloud Memorystore is a managed in-memory data store service provided by Google Cloud Platform (GCP). It is built on the popular open-source Redis cache, offering a fully managed environment for hosting Redis instances. Cloud Memorystore provides high-performance data caching and storage capabilities.
        - Advantages: Managed Redis, In Memory Speed, High Availability, Data Persistance for recovery, Compatibility
        - Dis: Limited for in memory data, Expensive
        - Usecases: Cloud Memorystore is suitable for applications that require fast data caching, session storage, and real-time data processing.
        - RL UseCases: Caching, Session Storage, Real Time Analytics, Leaderboards and counting (Realtime gaming data), PubSub and Messaging.
        - Similar Service: ElastiCache
        - Classification: DBaaS
        - Costing: Cost factors include instance size (memory), data transfer, and backup storage.
        - Cost Cutting: Optimize costs by selecting an appropriate instance size based on your data size and workload, using data persistence and backup options wisely, and optimizing your application's caching strategy.
        - Where to Use and Where Not to Use: Use Cloud Memorystore for applications that require high-speed data caching and real-time data processing. It might not be suitable for applications with large datasets that cannot fit entirely in-memory.
        - Deployment Options: Regional

    SR Big Query:
        - Cloud BigQuery is a fully managed, serverless, and highly scalable data warehouse and analytics platform provided by Google Cloud Platform (GCP). It enables you to analyze and query large datasets using SQL-like queries and supports batch and streaming data processing.
        - Advantages: Scalable, Serverless Arch, SQLLikeQuery, Federated Queries, Integration
        - Disadvantage: Expensive, Learning Curve
        - Usecases: Cloud BigQuery is well-suited for data warehousing, ad-hoc analytics, business intelligence, and large-scale data processing.
        - RL Usecases: Data WareHouse, Ad-Hoc Analysis, Log Analysis, market Analysis, Data Exploration
        - Similar Service: redshift
        - Classification: PaaS
        - Cost: Cost factors include the amount of data processed during queries (query data usage), storage usage, and streaming data inserts.
        - Cost Cutting: Optimize costs by managing data storage efficiently, using partitioned and clustered tables to reduce query costs, and optimizing SQL queries for performance.
        - Where to Use and Where Not to Use: Use Cloud BigQuery for analyzing large datasets and performing complex queries for insights. It might not be suitable for small-scale, frequent, or transactional data access.
        - Deployment Options: Regional

    SN Big Table:
        - Cloud Bigtable is a fully managed, scalable, NoSQL database service provided by Google Cloud Platform (GCP). It is designed for large analytical and operational workloads, offering high-performance, low-latency access to vast amounts of data.
        - Advantages: Scalable, High Performance, Fully Managed, Wide Column Store, Integration with Dataflow, Dataproc, and BigQuery.
        - Dis: Limited Query Capabilities, Data modeling Complexity
        - USe Cases: Cloud Bigtable is suitable for applications that require high-performance and low-latency access to large-scale, semi-structured or structured data.
        - RL UseCases: Ad Tech, Finance Service, Gaming
        - Similar Service: DynamoDB
        - Classification: DBaaS
        - Costing: Cost factors include the number of nodes, storage usage, data transfer, and replication.
        - Cost Cutting: Optimize costs by choosing appropriate node sizes based on workload requirements, managing data storage efficiently, and optimizing data modeling.
        - Where to Use and Where Not to Use: Use Cloud Bigtable for applications that require real-time, high-throughput, and low-latency access to large datasets. It might not be suitable for applications that require complex ad-hoc querying or transactional consistency.
        - Deployment Options: Regional

    SN FireStore:
        - Firestore is a fully managed, NoSQL document database service provided by Google Cloud Platform (GCP). It is designed to store, synchronize, and query data for web, mobile, and server applications. Firestore offers real-time data synchronization, automatic scaling, and a flexible data model.
        - Advantages: RealTime synchronization, Scalable, Secure, Offline Support
        - Dis: Expensive, Complex Query
        - UseCase: Firestore is suitable for applications that require real-time data synchronization, collaboration, and responsive user experiences across various devices.
        - RL Usecases: Mobile Apps, ECommerce, IOT, Gaming
        - Similar Service is Firestore is similar in concept to Firebase Realtime Database
        - Classification DBaaS
        - Cost Factors: Cost factors include data storage, data transfer, and document operations (reads, writes, deletes).
        - Cost Cutting: Optimize costs by efficiently structuring and organizing data, using Firestore's security rules to control access, and minimizing data transfer.
        - Where to Use and Where Not to Use: Use Firestore for applications requiring real-time synchronization, collaborative features, and responsive user experiences. It may not be suitable for applications that require complex querying beyond its capabilities.
        - Deployment options: It is Fully managedd service.

    SN FireBase: 
        - Firebase is a comprehensive platform provided by Google that offers a wide range of tools and services for building web and mobile applications. Firebase includes features for development, hosting, authentication, real-time databases, cloud functions, analytics, and more.
        - Advantaged: RealTIme DB, Authentication, Firebase Hosting, Notification, ML
        - Dis: Vendor Locking, complex
        - Use Cases: Firebase is suitable for developers building web and mobile applications who want an integrated platform for quickly developing and deploying features.
        - RL Usecases: MObile/Web Apps, IA, Real TIme Features, Analytics and Insights
        - Classification: 
            Firebase provides a collection of cloud services and tools, ranging from infrastructure services (hosting, databases) to application services (authentication, analytics, etc.).
        - Cost Factors: Cost factors depend on the specific Firebase services used, including storage, data transfer, usage of Cloud Functions, and other premium features.
        - Cost cutting factors: Optimize costs by managing resource usage efficiently, considering the free tier limits, and scaling services as needed based on user demand.
        - Where to Use and Where Not to Use: Firebase is well-suited for small to medium-sized applications, startups, and projects where rapid development and deployment are priorities. For larger applications with more complex requirements, it's important to assess whether Firebase's integrated approach aligns with your application's needs.
        - Deployment options: Firebase services are hosted and managed by Google, providing a fully managed environment for your applications.
        - Services: 
            Authentication: Provides built-in authentication services, allowing users to sign in using email/password, social media accounts (Google, Facebook, Twitter), phone numbers, and more.
            Realtime Database: A NoSQL cloud-hosted database that allows developers to store and synchronize data in real time across connected clients.
            Cloud Firestore: A more advanced NoSQL document database that provides real-time data synchronization and more complex querying capabilities.
            Cloud Functions: Allows you to run serverless functions in response to Firebase events or HTTPS requests.
            Hosting: Provides fast and secure hosting for web applications, enabling you to deploy web content quickly.
            Cloud Storage for Firebase: Allows you to store user-generated content, such as images and videos, in the cloud.
            Cloud Messaging (FCM): Enables push notifications and in-app messaging to engage users.
            Remote Config: Lets you customize the behavior and appearance of your app without publishing an app update.
            Dynamic Links: Provides deep linking capabilities that allow you to send users to specific locations within your app or to install your app if not already installed.
            Performance Monitoring: Helps you monitor and optimize your app's performance by tracking key performance indicators.
            Test Lab: Provides a cloud-based infrastructure for testing your app on real devices to ensure its functionality and compatibility.
            Crashlytics: Offers crash reporting and analysis to help you identify and fix app crashes quickly.
            App Distribution: Facilitates the distribution of pre-release app versions to testers and stakeholders.
            In-App Messaging: Allows you to send targeted and contextual messages to users while they're using your app.
            Predictions: Provides machine learning capabilities to help you predict user behavior and create personalized user experiences.
            ML Kit: Offers a set of machine learning APIs for adding features like image recognition, text detection, and language translation to your app.
            App Check: Protects your app and its backend resources by ensuring only authenticated and authorized instances can access them.

    SN Persistent Disk: 
        - Persistent Disk is a block storage service provided by Google Cloud Platform (GCP) that allows you to create and attach durable storage volumes to virtual machine instances. It provides reliable and scalable storage solutions for your compute workloads in the cloud.
        - Advantage: Durable, Flexible, SnapShots, Encryption, Scalable.
        - Dis: Regionally bound
        - Usecase: Persistent Disk is suitable for a wide range of applications and use cases that require reliable and scalable block storage for virtual machine instances.
        - RL Usecases: Database Storage, File Storage, Application Data. Backup and Disaster Recovery, Scalable
        - Similar serviec EBS, Elastic Block Store
        - Service Classification: IaaS
        - Cost Factors: storage capacity, type of disk, data transfer, and snapshots.
        - Cost Cutting Factors: Optimize costs by choosing appropriate disk types based on performance needs, using snapshots efficiently for backup, and managing data transfer carefully.
        - Where to Use and Where Not to Use: Use Persistent Disk when you need reliable, scalable, and persistent block storage for your virtual machine instances. It may not be suitable for scenarios that require fully distributed storage or highly specialized storage solutions.
        - Deployment Options: Specific Zone with in particular region.

    SN Data Proc: 
        - Dataproc is a managed big data processing service provided by Google Cloud Platform (GCP). It allows you to create and manage Apache Spark and Apache Hadoop clusters for processing large datasets using distributed computing techniques.
        - Advantages: Scalable, MAnaged, Compatible, Cost efficiency
        - Dis: Complex. Maintanance overhead
        - Use cases: Dataproc is suitable for processing and analyzing large datasets using distributed computing frameworks like Spark and Hadoop.
        - RL Usecases: Data Analytics, ML, Log Analysis, ETL.
        - Related Services: AWS Elastic Map reduce
        - Classification: PaaS
        - Costing: Cost factors include the number and types of virtual machines in the cluster, as well as data transfer and storage costs.
        - Cost Cutting: Optimize costs by right-sizing clusters based on workload requirements, using preemptible instances for non-critical workloads, and optimizing data processing jobs.
        - Where to Use and Where Not to Use: Use Dataproc when you need to process and analyze large datasets using distributed computing frameworks. It might not be suitable for smaller datasets or workloads that can be efficiently processed using single-node solutions.
        - Deployment Options: Dataproc allows you to create clusters in specific zones, and you can choose the zone based on latency and data residency requirements.







Terms/Tools:


    Horizontal and vertical scaling: 
        Horizontal scaling involves adding more machines or nodes to a system, while vertical scaling involves adding more power (CPU, RAM, storage, etc.) to an existing machine
    VMware-based workloads:
        Refer to software applications and services that are running on virtual machines (VMs) created and managed using VMware technology. These workloads utilize VMware's virtualization technology to create multiple isolated and independent virtual environments on a single physical server. This allows organizations to run multiple applications and operating systems on the same hardware, improving resource utilization and flexibility. VMware-based workloads can include various types of software, such as databases, web servers, applications, and more, all running within virtual machines created and managed by VMware tools and software.
    Blue Green Deployments:
        Blue-Green Deployments is a method like having two stages: one active (blue) and one for updates (green). Users switch instantly to the updated stage for testing, and if issues arise, they switch back, ensuring smooth updates without disruptions.
    GitOps:
        GitOps tools automate software deployment using version control (like Git). They monitor your code repository for changes and automatically apply them to your infrastructure, ensuring consistency. When you push code, GitOps detects, deploys, and manages updates to your apps and infrastructure, making operations more efficient. Popular tools include ArgoCD, Flux, and Jenkins X. It's like having a helpful robot that keeps your software in sync with your code changes, ensuring everything runs smoothly.
    Autopilot GKE:
        GKE Autopilot is like having a car with an expert driver. It manages everything—steering, speed, and even navigation—so you can relax and focus on enjoying the ride. Similarly, Autopilot manages your Kubernetes cluster's operations, scaling, and updates, ensuring your applications run smoothly without needing to worry about underlying details. Just tell it how much "power" (CPU and memory) your apps need, and it handles the rest, making Kubernetes simpler and more hands-off.
    Helm:
        Helm is a package manager for Kubernetes that simplifies the deployment and management of applications. It allows you to define, install, and upgrade complex Kubernetes applications using pre-configured packages called "charts."
    A/B Testing:
        A/B testing is like trying out two different recipes to see which one tastes better. In software, it's when you show a few people a new version of an app or website to see if they like it more than the old one, and then you decide which version to use based on what people liked.
    Canary Release: 
        It's when you let a small group of users try out a new version of a program to make sure it works well before sharing it with everyone else. If everything goes well, you slowly let more people use the new version.
    On-premises:
        An on-premises environment means that a company sets up and runs its computer systems, like servers and data storage, in its own building or office space instead of using computers from a cloud service. It's like having your own computer room at your workplace where you control everything.
    Multi-Cloud:
        Multi-cloud means using more than one cloud service from different companies. It's like having accounts with different phone carriers so you can switch between them depending on where you get the best signal.
    Cold Starts:
        A "cold start" refers to the delayed initialization of a software application or server instance that occurs when it's activated after being idle. During a cold start, resources are provisioned, dependencies loaded, and startup processes executed, leading to slower response times for initial requests. Cloud providers use strategies to minimize cold start impact, but it can affect user experience, especially for applications with low latency needs. Optimal architecture and resource management are important to mitigate cold start delays.
    Topmost layer in a container:
        The topmost layer of a container image represents the final state of the filesystem, including the application code and runtime environment, and is the starting point for running a container.
    Control Planes:
        Controller of cluster.

